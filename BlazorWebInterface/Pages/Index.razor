@page "/"
@using CringeForestLibrary
@inject CringeForest CringeForest
@inject IJSRuntime JsRuntime

<PageTitle>CringeForest</PageTitle>

<div class="wrapper">
  <div class="simulation-view">
    <p>Simulation view</p>
    <div class="simulation">
      <Simulation />
    </div>
  </div>

  <div class="statistics-view">
    <p>Statistics view</p>
    <div class="statistics">
      <Statistics />
    </div>
  </div>

  <div class="menu">
    <p>Menu</p>
    <button class="btn btn-primary" hidden="@(!_inputFileDisabled || _simulationRunning)" @onclick="StartSimulation">
      Start new simulation
    </button>
    <div class="input-file" hidden="@_inputFileDisabled"><InputFile OnChange="@LoadMap" /></div>
    <button class="btn btn-primary" hidden="@(!_inputFileDisabled || _simulationRunning)" @onclick="PrepareLoadMap">
      Load map
    </button>
    <button class="btn btn-primary" hidden="@(!_inputFileDisabled || _noSimulation || _simulationRunning)" 
            @onclick="SaveMap">
      Save map
    </button>
    <button class="btn btn-primary" hidden="@(!_inputFileDisabled || !_simulationRunning)" @onclick="StopSimulation">
      Stop simulation
    </button>
  </div>
</div>

@code 
{

  private bool _simulationRunning;
  private bool _noSimulation = true;
  private bool _inputFileDisabled = true;
  private string _map;

  private void StartSimulation()
  {
    Task.Run(CringeForest.InitializeSimulation);
    _simulationRunning = true;
    _noSimulation = false;
  }

  private void PrepareLoadMap()
  {
    _inputFileDisabled = false;
  }

  private async Task LoadMap(InputFileChangeEventArgs e)
  {
    await using FileStream fs = new("map.tmp", FileMode.Create);
    await e.File.OpenReadStream().CopyToAsync(fs);
    fs.Position = 0;
    var reader = new StreamReader(fs);
    var map = await reader.ReadToEndAsync();
    CringeForest.LoadMap(map);
    _inputFileDisabled = true;
  }

  private async void SaveMap()
  {
    const string fileName = "savedMap.json";
    
    var stream = new MemoryStream();
    var writer = new StreamWriter(stream);
    await writer.WriteAsync(_map);
    await writer.FlushAsync();
    stream.Position = 0;
    
    using var streamRef = new DotNetStreamReference(stream);
    
    await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
  }

  private async void StopSimulation()
  {
    _simulationRunning = false;

    _map = CringeForest.SaveMap();
    CringeForest.ExitSimulation();

    await JsRuntime.InvokeVoidAsync("reset");
  }
  
}
