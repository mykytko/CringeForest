@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas.WebGL
@using CringeForestLibrary
@using Microsoft.AspNetCore.SignalR.Client
@using WebInterface
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Diagnostics
@using WebInterface.Serializable
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<canvas id="statistics" width="800" height="500"></canvas>

@code {
    private HubConnection? _hubConnection;
    private int _width, _height;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("wss://127.0.0.1:7025/statistics", options =>
            {
                options.WebSocketConfiguration = conf =>
                {
                    conf.RemoteCertificateValidationCallback =
                        (_, _, _, _) => true;
                };
                options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (_, _, _, _) => true
                };
            }).AddMessagePackProtocol().Build();

        _hubConnection.On<string>("ReceiveStatistics", receivedStatistics =>
        {
            InvokeAsync(StateHasChanged);
            JsRuntime.InvokeVoidAsync("updateStatistics", receivedStatistics);
        });

        await _hubConnection.StartAsync();
    }
}