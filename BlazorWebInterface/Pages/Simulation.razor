@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas.WebGL
@using CringeForestLibrary
@using Microsoft.AspNetCore.SignalR.Client
@using WebInterface
@using JsonSerializer = System.Text.Json.JsonSerializer
@using System.Diagnostics
@using WebInterface.Serializable
@inject IJSRuntime JsRuntime
@inject NavigationManager NavigationManager
<canvas id="simulation" width="800" height="800"></canvas>

@code {
    private HubConnection? _hubConnection;
    private SerializableMap? _map;
    private int _width, _height;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            return;
        }
        
        _hubConnection = new HubConnectionBuilder()
            .WithUrl("wss://127.0.0.1:7025/simulation", options =>
            {
                options.WebSocketConfiguration = conf =>
                {
                    conf.RemoteCertificateValidationCallback =
                        (_, _, _, _) => true;
                };
                options.HttpMessageHandlerFactory = _ => new HttpClientHandler
                {
                    ServerCertificateCustomValidationCallback = (_, _, _, _) => true
                };
            }).AddMessagePackProtocol().Build();

        _hubConnection.On<string>("ReceiveMap", receivedMap =>
        {
            _map = JsonSerializer.Deserialize<SerializableMap>(receivedMap);
            Debug.Assert(_map != null, nameof(_map) + " != null");
            _width = _map.Width;
            _height = _map.Height;
            InvokeAsync(StateHasChanged);
            FirstRender();
        });
        
        _hubConnection.On<string>("ReceiveFoodRatio",  receivedStruct =>
        {
            var coordsAndRatio = JsonSerializer.Deserialize<CoordsAndRatio>(receivedStruct);
            Debug.Assert(coordsAndRatio != null, nameof(coordsAndRatio) + " != null");
            var x = coordsAndRatio.Y * _width + coordsAndRatio.X;
            var ratio = coordsAndRatio.Ratio;
            InvokeAsync(StateHasChanged);
            JsRuntime.InvokeVoidAsync("updateFoodRatio", x, ratio);
        });
        
        _hubConnection.On<string>("ReceiveAdd",  receivedStruct =>
        {
            var (id, animal) = JsonSerializer
                .Deserialize<KeyValuePair<int, CoordsAndType>>(receivedStruct);
            InvokeAsync(StateHasChanged);
            JsRuntime.InvokeVoidAsync("addAnimal", id, animal.X, animal.Y, animal.AnimalType);
        });
        
        _hubConnection.On<string>("ReceiveDelete",  receivedStruct =>
        {
            var id = JsonSerializer.Deserialize<int>(receivedStruct);
            InvokeAsync(StateHasChanged);
            JsRuntime.InvokeVoidAsync("removeAnimal", id);
        });
        
        _hubConnection.On<string>("ReceiveMove",  receivedStruct =>
        {
            var (id, coords) = JsonSerializer.Deserialize<KeyValuePair<int, Coords>>(receivedStruct);
            InvokeAsync(StateHasChanged);
            JsRuntime.InvokeVoidAsync("moveAnimal", id, coords.X, coords.Y);
        });

        await _hubConnection.StartAsync();
    }

    private async void FirstRender()
    {
        var mapData = new int[_width * _height];
        Debug.Assert(_map != null, nameof(_map) + " != null");
        for (var i = 0; i < _map.Height; i++)
        {
            for (var j = 0; j < _map.Width; j++)
            {
                mapData[i * _width + j] = _map.Matrix[i][j];
            }
        }

        var graphics = await File.ReadAllTextAsync("GraphicsSpecification.json");
        await JsRuntime.InvokeVoidAsync("firstRender", _height, _width, mapData,
            JsonSerializer.Serialize(_map.FoodSuppliers), JsonSerializer.Serialize(_map.Animals), graphics);
    }
}